// Описание:
// Дайте вам два массива arr1 и arr2. Они содержат некоторые цифры. 
// Они имеют одинаковую длину. Вычислите сумму соответствующего номера позиции, 
// найдите наибольшее количество пар, имеющих одинаковое значение суммы. верните
// результат в виде двумерного массива, содержащего все пары. 
// Например:

// arr1=[1,2,3,4,5]
// arr2=[9,8,0,0,0]
// findPair(arr1,arr2) should return [[1,9],[2,8]]
// because:

// 1  2  3 4 5
// +  +  + + +
// 9  8  0 0 0
// |  |  | | |
// 10 10 3 4 5
// 1,9 and 2,8 have the same sum value 10
// Вам не нужно проверять входные данные. arr1 и arr2 
// всегда будут иметь одинаковое количество элементов,
// а тестовый набор не будет предоставлять пустой массив.

// Если все пары имеют разное значение суммы, верните [].

// Если более одной группы пар имеют одинаковое число,
// выберите ту, которая имеет максимальное значение суммы (см. последний пример).

// Вам не нужно сортировать результат, возвращайте пары
//  в соответствии с порядком индекса.

// Примеры
// arr1=[1,2,3,4,5]
// arr2=[0,0,0,0,0]
// findPair(arr1,arr2) should return []

// arr1=[1,2,3,4,5]
// arr2=[5,4,3,2,1]
// findPair(arr1,arr2) should return [[1,5],[2,4],[3,3],[4,2],[5,1]]

function findPair(arr1, arr2) {
  let pairs = {};
  arr1.forEach((curr, i)=>{
    let sum = curr + arr2[i];
    (pairs[sum] = pairs[sum] || []).push([curr, arr2[i]])
  });
  let longest = [];
  for (let key in pairs) {
    let len = pairs[key].length; 
    if (len > 1 && len >= longest.length) {
      longest = pairs[key];
    }
  }
  return longest;
}

console.log(findPair([1,2,3,4,5],[9,8,0,0,0]))//[[1,9],[2,8]])
// console.log(findPair([1,2,3,4,5],[0,0,0,0,0]))//[])
// console.log(findPair([1,2,3,4,5],[5,4,3,2,1]))//[[1,5],[2,4],[3,3],[4,2],[5,1]])
// console.log(findPair([0,1,3,4,5],[1,0,3,2,1]))//[[3,3],[4,2],[5,1]])
// console.log(findPair([1,2,3,4,5],[-1,2,-3,4,-5]))//[[1,-1],[3,-3],[5,-5]])
// console.log(findPair([1,2,3,0,5,-2],[-1,2,-3,4,-5,6]))//[[2,2],[0,4],[-2,6]])